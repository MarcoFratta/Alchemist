/*
 * Copyright (C) 2010-2025, Danilo Pianini and contributors
 * listed, for each module, in the respective subproject's build.gradle.kts file.
 *
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception,
 * as described in the file LICENSE in the Alchemist distribution's top directory.
 */
package it.unibo.alchemist.dsl

import it.unibo.alchemist.boundary.LoadAlchemist
import it.unibo.alchemist.boundary.Loader
import it.unibo.alchemist.core.Simulation
import it.unibo.alchemist.model.Environment
import it.unibo.alchemist.model.Node
import it.unibo.alchemist.model.Position
import org.junit.jupiter.api.Assertions.assertEquals
import org.kaikikm.threadresloader.ResourceLoader

/**
 * Test helper for comparing DSL and YAML loaders
 */
object LoaderComparisonHelper {

    /**
     * Compares a DSL loader with a YAML loader to ensure they produce equivalent simulations
     */
    fun <T, P : Position<P>> compareLoaders(dslLoader: Loader, yamlResource: String) {
        val yamlLoader = LoadAlchemist.from(ResourceLoader.getResource(yamlResource)!!)

        // Compare basic properties
        compareBasicProperties(dslLoader, yamlLoader)

        // Compare simulations
        compareSimulations<T, P>(dslLoader, yamlLoader)
    }

    /**
     * Compares basic loader properties
     */
    private fun compareBasicProperties(dslLoader: Loader, yamlLoader: Loader) {
        println("Comparing basic properties...")

        // Compare constants
        assertEquals(
            yamlLoader.constants,
            dslLoader.constants,
            "Constants should match",
        )

        // Compare variables
        assertEquals(
            yamlLoader.variables,
            dslLoader.variables,
            "Variables should match",
        )

        // Compare dependent variables
        assertEquals(
            yamlLoader.dependentVariables,
            dslLoader.dependentVariables,
            "Dependent variables should match",
        )

        // Compare remote dependencies
        assertEquals(
            yamlLoader.remoteDependencies,
            dslLoader.remoteDependencies,
            "Remote dependencies should match",
        )

        // Compare launcher types (not exact instances)
        assertEquals(
            yamlLoader.launcher::class,
            dslLoader.launcher::class,
            "Launcher types should match",
        )
    }

    /**
     * Compares the simulations generated by both loaders
     */
    private fun <T, P : Position<P>> compareSimulations(dslLoader: Loader, yamlLoader: Loader) {
        println("Comparing simulations...")

        val dslSimulation = dslLoader.getDefault<T, P>()
        val yamlSimulation = yamlLoader.getDefault<T, P>()

        // Compare environments
        compareEnvironments(dslSimulation.environment, yamlSimulation.environment)

        // Compare simulation properties
        compareSimulationProperties(dslSimulation, yamlSimulation)
    }

    /**
     * Compares two environments
     */
    private fun <T, P : Position<P>> compareEnvironments(dslEnv: Environment<T, P>, yamlEnv: Environment<T, P>) {
        println("Comparing environments...")

        // Compare node counts
        assertEquals(
            yamlEnv.nodes.size,
            dslEnv.nodes.size,
            "Node counts should match",
        )

        // Compare node positions
        val dslPositions = dslEnv.nodes.map { dslEnv.getPosition(it) }.toSet()
        val yamlPositions = yamlEnv.nodes.map { yamlEnv.getPosition(it) }.toSet()
        assertEquals(
            yamlPositions,
            dslPositions,
            "Node positions should match",
        )

        // Compare node contents (molecules and concentrations)
        compareNodeContents(dslEnv, yamlEnv)

        // Compare linking rules
        assertEquals(
            yamlEnv.linkingRule::class,
            dslEnv.linkingRule::class,
            "Linking rule types should match",
        )

        // Compare programs (reactions)
        comparePrograms(dslEnv, yamlEnv)
    }

    /**
     * Compares node contents (molecules and concentrations)
     */
    private fun <T, P : Position<P>> compareNodeContents(dslEnv: Environment<T, P>, yamlEnv: Environment<T, P>) {
        println("Comparing node contents...")

        // Since we can't match by position, we'll compare all nodes by their contents
        val dslNodes = dslEnv.nodes.toList()
        val yamlNodes = yamlEnv.nodes.toList()

        // Compare total molecule counts
        val dslTotalMolecules = dslNodes.sumOf { it.moleculeCount }
        val yamlTotalMolecules = yamlNodes.sumOf { it.moleculeCount }

        assertEquals(
            yamlTotalMolecules,
            dslTotalMolecules,
            "Total molecule counts should match",
        )

        // Compare all node contents (without position matching)
        val dslContents = dslNodes.map { it.contents }.sortedBy { it.toString() }
        val yamlContents = yamlNodes.map { it.contents }.sortedBy { it.toString() }

        assertEquals(
            yamlContents,
            dslContents,
            "All node contents (molecules and concentrations) should match",
        )
    }

    /**
     * Compares programs between environments
     */
    private fun <T, P : Position<P>> comparePrograms(dslEnv: Environment<T, P>, yamlEnv: Environment<T, P>) {
        println("Comparing programs...")

        // Compare global reactions
        compareGlobalReactions(dslEnv, yamlEnv)

        // Compare node reactions
        compareNodeReactions(dslEnv, yamlEnv)
    }

    /**
     * Compares global reactions
     */
    private fun <T, P : Position<P>> compareGlobalReactions(dslEnv: Environment<T, P>, yamlEnv: Environment<T, P>) {
        println("Comparing global reactions...")

        val dslGlobalReactions = dslEnv.globalReactions.toList()
        val yamlGlobalReactions = yamlEnv.globalReactions.toList()

        assertEquals(
            yamlGlobalReactions.size,
            dslGlobalReactions.size,
            "Global reactions count should match",
        )

        // Compare global reaction types
        val dslGlobalTypes = dslGlobalReactions.map { it::class }.sortedBy { it.simpleName }
        val yamlGlobalTypes = yamlGlobalReactions.map { it::class }.sortedBy { it.simpleName }

        assertEquals(
            yamlGlobalTypes,
            dslGlobalTypes,
            "Global reaction types should match",
        )
    }

    /**
     * Compares node reactions (programs)
     */
    private fun <T, P : Position<P>> compareNodeReactions(dslEnv: Environment<T, P>, yamlEnv: Environment<T, P>) {
        println("Comparing node reactions...")

        val dslNodes = dslEnv.nodes.toList()
        val yamlNodes = yamlEnv.nodes.toList()

        // Compare total reaction counts
        val dslTotalReactions = dslNodes.sumOf { it.reactions.size }
        val yamlTotalReactions = yamlNodes.sumOf { it.reactions.size }

        assertEquals(
            yamlTotalReactions,
            dslTotalReactions,
            "Total node reactions count should match",
        )

        // Compare reaction types across all nodes
        val dslReactionTypes = dslNodes.flatMap { it.reactions }.map { it::class }.sortedBy { it.simpleName }
        val yamlReactionTypes = yamlNodes.flatMap { it.reactions }.map { it::class }.sortedBy { it.simpleName }

        assertEquals(
            yamlReactionTypes,
            dslReactionTypes,
            "Node reaction types should match",
        )

        // Compare reaction programs (conditions and actions)
        compareReactionPrograms(dslNodes, yamlNodes)
    }

    /**
     * Compares reaction programs by comparing their string representations and dependencies
     */
    private fun <T> compareReactionPrograms(dslNodes: List<Node<T>>, yamlNodes: List<Node<T>>) {
        println("Comparing reaction programs...")

        // Compare total reactions count
        val dslTotalReactions = dslNodes.sumOf { it.reactions.size }
        val yamlTotalReactions = yamlNodes.sumOf { it.reactions.size }

        assertEquals(
            yamlTotalReactions,
            dslTotalReactions,
            "Total reactions count should match",
        )

        // Compare reactions by their string representations and dependencies
        val dslReactions = dslNodes.flatMap { it.reactions }.map { reaction ->
            ReactionInfo(
                reactionString = try {
                    reaction.toString()
                } catch (e: Exception) {
                    "<error in toString()>"
                },
                inboundDependencies = reaction.inboundDependencies.map { it.toString() }.sorted(),
                outboundDependencies = reaction.outboundDependencies.map { it.toString() }.sorted(),
            )
        }.sortedBy { it.toString() }

        val yamlReactions = yamlNodes.flatMap { it.reactions }.map { reaction ->
            ReactionInfo(
                reactionString = try {
                    reaction.toString()
                } catch (e: Exception) {
                    "<error in toString()>"
                },
                inboundDependencies = reaction.inboundDependencies.map { it.toString() }.sorted(),
                outboundDependencies = reaction.outboundDependencies.map { it.toString() }.sorted(),
            )
        }.sortedBy { it.toString() }

        assertEquals(
            yamlReactions,
            dslReactions,
            "Reaction string representations and dependencies should match",
        )
    }

    /**
     * Data class to represent reaction information for comparison
     */
    private data class ReactionInfo(
        val reactionString: String,
        val inboundDependencies: List<String>,
        val outboundDependencies: List<String>,
    ) {
        override fun toString(): String =
            "Reaction(string='$reactionString', inbound=$inboundDependencies, outbound=$outboundDependencies)"
    }

    /**
     * Compares simulation properties
     */
    private fun compareSimulationProperties(dslSimulation: Simulation<*, *>, yamlSimulation: Simulation<*, *>) {
        println("Comparing simulation properties...")

        // Compare output monitors count
        assertEquals(
            yamlSimulation.outputMonitors.size,
            dslSimulation.outputMonitors.size,
            "Output monitors count should match",
        )

        // Compare output monitor types by class since instances may differ
        val yamlMonitorTypes = yamlSimulation.outputMonitors.map { it::class }
        val dslMonitorTypes = dslSimulation.outputMonitors.map { it::class }

        assertEquals(
            yamlMonitorTypes.sortedBy { it.simpleName },
            dslMonitorTypes.sortedBy { it.simpleName },
            "Output monitor types should match",
        )
    }
}

/**
 * Extension function for easier test writing
 */
fun Loader.shouldEqual(yamlResource: String) {
    @Suppress("UNCHECKED_CAST")
    LoaderComparisonHelper.compareLoaders<Any, Nothing>(this, yamlResource)
}
